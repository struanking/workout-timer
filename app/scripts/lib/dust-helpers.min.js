(function(dust){var _console=(typeof console!=="undefined")?console:{log:function(){}};function isSelect(context){var value=context.current();return typeof value==="object"&&value.isSelect===true;}function jsonFilter(key,value){if(typeof value==="function"){return value.toString();}return value;}function filter(chunk,context,bodies,params,filterOp){params=params||{};var body=bodies.block,actualKey,expectedValue,filterOpType=params.filterOpType||"";if(typeof params.key!=="undefined"){actualKey=dust.helpers.tap(params.key,chunk,context);}else{if(isSelect(context)){actualKey=context.current().selectKey;if(context.current().isResolved){filterOp=function(){return false;};}}else{_console.log("No key specified for filter in:"+filterOpType+" helper ");return chunk;}}expectedValue=dust.helpers.tap(params.value,chunk,context);if(filterOp(coerce(expectedValue,params.type,context),coerce(actualKey,params.type,context))){if(isSelect(context)){context.current().isResolved=true;}if(body){return chunk.render(body,context);}else{_console.log("Missing body block in the "+filterOpType+" helper ");return chunk;}}else{if(bodies["else"]){return chunk.render(bodies["else"],context);}}return chunk;}function coerce(value,type,context){if(value){switch(type||typeof(value)){case"number":return +value;case"string":return String(value);case"boolean":value=(value==="false"?false:value);return Boolean(value);case"date":return new Date(value);case"context":return context.get(value);}}return value;}var helpers={tap:function(input,chunk,context){var output=input;if(typeof input==="function"){if(input.isFunction===true){output=input();}else{output="";chunk.tap(function(data){output+=data;return"";}).render(input,context).untap();if(output===""){output=false;}}}return output;},sep:function(chunk,context,bodies){var body=bodies.block;if(context.stack.index===context.stack.of-1){return chunk;}if(body){return bodies.block(chunk,context);}else{return chunk;}},idx:function(chunk,context,bodies){var body=bodies.block;if(body){return bodies.block(chunk,context.push(context.stack.index));}else{return chunk;}},contextDump:function(chunk,context,bodies,params){var p=params||{},to=p.to||"output",key=p.key||"current",dump;to=dust.helpers.tap(to,chunk,context),key=dust.helpers.tap(key,chunk,context);if(key==="full"){dump=JSON.stringify(context.stack,jsonFilter,2);}else{dump=JSON.stringify(context.stack.head,jsonFilter,2);}if(to==="console"){_console.log(dump);return chunk;}else{return chunk.write(dump);}},"if":function(chunk,context,bodies,params){var body=bodies.block,skip=bodies["else"];if(params&&params.cond){var cond=params.cond;cond=dust.helpers.tap(cond,chunk,context);if(eval(cond)){if(body){return chunk.render(bodies.block,context);}else{_console.log("Missing body block in the if helper!");return chunk;}}if(skip){return chunk.render(bodies["else"],context);}}else{_console.log("No condition given in the if helper!");}return chunk;},math:function(chunk,context,bodies,params){if(params&&typeof params.key!=="undefined"&&params.method){var key=params.key,method=params.method,operand=params.operand,round=params.round,mathOut=null,operError=function(){_console.log("operand is required for this math method");return null;};key=dust.helpers.tap(key,chunk,context);operand=dust.helpers.tap(operand,chunk,context);switch(method){case"mod":if(operand===0||operand===-0){_console.log("operand for divide operation is 0/-0: expect Nan!");}mathOut=parseFloat(key)%parseFloat(operand);break;case"add":mathOut=parseFloat(key)+parseFloat(operand);break;case"subtract":mathOut=parseFloat(key)-parseFloat(operand);break;case"multiply":mathOut=parseFloat(key)*parseFloat(operand);break;case"divide":if(operand===0||operand===-0){_console.log("operand for divide operation is 0/-0: expect Nan/Infinity!");}mathOut=parseFloat(key)/parseFloat(operand);break;case"ceil":mathOut=Math.ceil(parseFloat(key));break;case"floor":mathOut=Math.floor(parseFloat(key));break;case"round":mathOut=Math.round(parseFloat(key));break;case"abs":mathOut=Math.abs(parseFloat(key));break;default:_console.log("method passed is not supported");}if(mathOut!==null){if(round){mathOut=Math.round(mathOut);}if(bodies&&bodies.block){return chunk.render(bodies.block,context.push({isSelect:true,isResolved:false,selectKey:mathOut}));}else{return chunk.write(mathOut);}}else{return chunk;}}else{_console.log("Key is a required parameter for math helper along with method/operand!");}return chunk;},select:function(chunk,context,bodies,params){var body=bodies.block;if(params&&typeof params.key!=="undefined"){var key=dust.helpers.tap(params.key,chunk,context);if(body){return chunk.render(bodies.block,context.push({isSelect:true,isResolved:false,selectKey:key}));}else{_console.log("Missing body block in the select helper ");return chunk;}}else{_console.log("No key given in the select helper!");}return chunk;},eq:function(chunk,context,bodies,params){if(params){params.filterOpType="eq";}return filter(chunk,context,bodies,params,function(expected,actual){return actual===expected;});},ne:function(chunk,context,bodies,params){if(params){params.filterOpType="ne";return filter(chunk,context,bodies,params,function(expected,actual){return actual!==expected;});}return chunk;},lt:function(chunk,context,bodies,params){if(params){params.filterOpType="lt";return filter(chunk,context,bodies,params,function(expected,actual){return actual<expected;});}},lte:function(chunk,context,bodies,params){if(params){params.filterOpType="lte";return filter(chunk,context,bodies,params,function(expected,actual){return actual<=expected;});}return chunk;},gt:function(chunk,context,bodies,params){if(params){params.filterOpType="gt";return filter(chunk,context,bodies,params,function(expected,actual){return actual>expected;});}return chunk;},gte:function(chunk,context,bodies,params){if(params){params.filterOpType="gte";return filter(chunk,context,bodies,params,function(expected,actual){return actual>=expected;});}return chunk;},"default":function(chunk,context,bodies,params){if(params){params.filterOpType="default";}return filter(chunk,context,bodies,params,function(expected,actual){return true;});},size:function(chunk,context,bodies,params){var key,value=0,nr,k;params=params||{};key=params.key;if(!key||key===true){value=0;}else{if(dust.isArray(key)){value=key.length;}else{if(!isNaN(parseFloat(key))&&isFinite(key)){value=key;}else{if(typeof key==="object"){nr=0;for(k in key){if(Object.hasOwnProperty.call(key,k)){nr++;}}value=nr;}else{value=(key+"").length;}}}}return chunk.write(value);}};dust.helpers=helpers;})(typeof exports!=="undefined"?module.exports=require("dustjs-linkedin"):dust);